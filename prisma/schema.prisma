generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model security_logs {
  id        String            @id
  userId    String?
  email     String?
  eventType SecurityEventType
  ipAddress String?
  userAgent String?
  success   Boolean
  metadata  Json?
  createdAt DateTime          @default(now())

  @@index([eventType])
  @@index([userId, eventType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  sessionID String   @unique
  isActive  Boolean  @default(true)

  @@index([expiresAt])
  @@index([userId, isActive])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                       Int       @id @default(autoincrement())
  email                    String    @unique
  name                     String
  password                 String
  number                   String    @unique
  walletID                 String?
  address                  String?
  country                  String?
  createdAt                DateTime  @default(now())
  dob                      DateTime?
  state                    String?
  emailVerified            Boolean   @default(false)
  verificationToken        String?   @unique
  verificationTokenExpires DateTime?
  resetToken               String?   @unique
  resetTokenExpires        DateTime?
  lastLoginAt              DateTime?
  failedLoginAttempts      Int       @default(0)
  lockedUntil              DateTime?
  passwordChangedAt        DateTime  @default(now())
  isActive                 Boolean   @default(true)
  role                     UserRole  @default(USER)
  twoFactorEnabled         Boolean   @default(false)
  twoFactorSecret          String?
  isDeleted                Boolean   @default(false)
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILURE
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_SUCCESS
  PASSWORD_RESET_FAILURE
  PASSWORD_CHANGE_REQUEST
  PASSWORD_CHANGE_SUCCESS
  PASSWORD_CHANGE_FAILURE
  EMAIL_VERIFICATION_REQUEST
  EMAIL_VERIFICATION_SUCCESS
  EMAIL_VERIFICATION_FAILURE
  ACCOUNT_LOCKED
  SUSPICIOUS_ACTIVITY
  ACCOUNT_DEACTIVATION_SUCCESS
  ACCOUNT_DEACTIVATION_FAILURE
  ACCOUNT_DELETION_SUCCESS
  ACCOUNT_DELETION_FAILURE
  LOGOUT_ATTEMPT
  LOGOUT_SUCCESS
  LOGOUT_FAILURE
  SERVICE_AUTH_SUCCESS
  SERVICE_AUTH_FAILURE
  EMAIL_UPDATE_SUCCESS
  EMAIL_UPDATE_FAILURE
  PHONE_UPDATE_SUCCESS
  PHONE_UPDATE_FAILURE
  SIGNUP_ATTEMPT
  SIGNUP_SUCCESS
  SIGNUP_FAILURE
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
